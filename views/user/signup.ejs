<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - M Store</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Add Toastify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <!-- Add Toastify JS -->
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --accent-color: #ff9900;
            --danger-color: #dc3545;
            --light-gray: #f8f9fa;
            --dark-gray: #343a40;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea, #764ba2);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .card {
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            overflow: hidden;
        }

        .card-header {
            font-size: 1.5rem;
            font-weight: bold;
            background: var(--dark-gray);
            color: white;
            padding: 1rem;
            text-align: center;
            border-bottom: none;
            border-radius: 15px 15px 0 0;
        }

        .card-header span {
            color: var(--accent-color);
        }

        .card-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 500;
            color: var(--dark-gray);
        }

        .form-control {
            border-radius: 8px;
            padding: 0.6rem 1rem;
            border: 1px solid #ddd;
            margin-bottom: 0.5rem;
        }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(255, 153, 0, 0.25);
            border-color: var(--accent-color);
        }

        .btn-primary {
            background-color: var(--accent-color);
            border: none;
            padding: 0.6rem 1rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #e68a00;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .btn-danger {
            background-color: #e53e3e;
            border: none;
            padding: 0.6rem 1rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-danger:hover {
            background-color: #c53030;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .btn-google {
            background-color: #db4437;
            border: none;
            color: white;
            padding: 0.6rem 1rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-google:hover {
            background-color: #c1351d;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        hr {
            margin: 1.5rem 0;
            opacity: 0.2;
        }

        a {
            color: var(--accent-color);
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        a:hover {
            color: #e68a00;
        }

        .text-danger {
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        .social-login-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .social-login-btn i {
            font-size: 1.2rem;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        /* Loader Overlay */
        #loaderOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            display: none;
        }

        .loader-content {
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            text-align: center;
        }

        .spinner {
            width: 3rem;
            height: 3rem;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--accent-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom toast styling */
        .toastify {
            padding: 12px 20px;
            color: white;
            display: inline-block;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            background: linear-gradient(135deg, #ff5f6d, #ffc371);
            position: fixed;
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            max-width: 300px;
            z-index: 9999;
        }
    </style>
</head>
<body>
    <!-- Loader Overlay -->
    <div id="loaderOverlay">
        <div class="loader-content">
            <div class="spinner"></div>
            <p class="mb-0 font-weight-medium">Processing your request...</p>
        </div>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="card">
                    <div class="card-header">
                        <span>M</span> Store Sign Up
                    </div>
                    <div class="card-body">
                        <form id="signupForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <input type="text" class="form-control" id="name" name="name" placeholder="Enter your name">
                                <small id="nameError" class="text-danger"></small>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" placeholder="you@example.com">
                                <small id="emailError" class="text-danger"></small>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" name="password">
                                <small id="passwordError" class="text-danger"></small>
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
                                <small id="confirmPasswordError" class="text-danger"></small>
                            </div>
                            <div class="mb-3">
                                <label for="referralCode" class="form-label">Referral Code <small>(Optional)</small></label>
                                <input type="text" class="form-control" id="referralCode" name="referralCode" placeholder="Enter referral code if you have one">
                                <small id="referralCodeError" class="text-danger"></small>
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <input type="text" class="form-control" id="phone" name="phonenumber">
                                <small id="phoneError" class="text-danger"></small>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Sign Up</button>
                        </form>
                        <hr>
                        <button class="btn btn-google w-100 mt-2 social-login-btn" onclick="location.href='/user/google'">
                            <i class="bi bi-google"></i> Sign Up with Google
                        </button>
                        <hr>
                        <div class="text-center">
                            <a href="/user/login">Already have an account? Login</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables to track OTP timer state
        let globalTimeLeft = 60;
        let globalCountdownInterval = null;
        let isTimerRunning = false;

        // Function to show loader
        function showLoader() {
            document.getElementById('loaderOverlay').style.display = 'flex';
        }

        // Function to hide loader
        function hideLoader() {
            document.getElementById('loaderOverlay').style.display = 'none';
        }

        // Function to start or continue the countdown
        function startOrContinueCountdown(timerElement, resendBtn) {
            // Clear any existing interval
            if (globalCountdownInterval) {
                clearInterval(globalCountdownInterval);
            }

            isTimerRunning = true;
            
            globalCountdownInterval = setInterval(() => {
                if (globalTimeLeft <= 0) {
                    clearInterval(globalCountdownInterval);
                    timerElement.textContent = "00:00";
                    resendBtn.disabled = false;
                    isTimerRunning = false;
                } else {
                    globalTimeLeft--;
                    const minutes = Math.floor(globalTimeLeft / 60);
                    const seconds = globalTimeLeft % 60;
                    timerElement.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                }
            }, 1000);
        }

        // Function to reset the timer
        function resetTimer() {
            if (globalCountdownInterval) {
                clearInterval(globalCountdownInterval);
            }
            globalTimeLeft = 60;
            isTimerRunning = false;
        }

        // Function to handle OTP verification
        async function verifyOTP(email, otpValue) {
            try {
                const otpResponse = await fetch(`/user/otp/validate/${encodeURIComponent(email)}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ otp: otpValue })
                });
                
                const otpData = await otpResponse.json();
                console.log("OTP verification response:", otpData);
                
                if (otpResponse.ok) {
                    // Clear timer on successful verification
                    if (globalCountdownInterval) {
                        clearInterval(globalCountdownInterval);
                    }
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Verified!',
                        text: otpData.message,
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = otpData.redirect; // e.g., "/user/login"
                    });
                    
                    return { success: true };
                } else {
                    // Show toast for invalid OTP
                    Toastify({
                        text: otpData.message || 'Invalid OTP, please try again.',
                        duration: 3000,
                        gravity: "bottom",
                        position: "center",
                        backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
                        stopOnFocus: true,
                        className: "rounded-lg shadow-lg",
                        onClick: function(){}
                    }).showToast();
                    
                    return { 
                        success: false, 
                        message: otpData.message || 'Invalid OTP, please try again.'
                    };
                }
            } catch (error) {
                console.error("Error during OTP verification:", error);
                
                Toastify({
                    text: 'Failed to verify OTP. Please try again.',
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
                    stopOnFocus: true,
                    className: "rounded-lg shadow-lg",
                    onClick: function(){}
                }).showToast();
                
                return { 
                    success: false, 
                    message: 'Network error. Please try again.' 
                };
            }
        }

        // Function to show OTP modal
        async function showOTPModal(email, errorMessage = null) {
            hideLoader(); // Hide loader before showing OTP modal
            
            const result = await Swal.fire({
                title: 'Enter OTP',
                html: `
                    <div class="p-2">
                        <p class="mb-3" style="font-size: 0.9rem; color: #666;">We've sent a verification code to your email</p>
                        <input id="otpInput" class="swal2-input" placeholder="Enter OTP" style="border-radius: 8px; border: 1px solid #ddd;">
                        <div id="otpTimer" class="mt-3" style="font-weight: 500; color: #333;">
                            ${isTimerRunning ? formatTime(globalTimeLeft) : '01:00'}
                        </div>
                        <button id="resendOtpBtn" class="swal2-confirm swal2-styled mt-3" 
                            style="background-color: #ff9900; opacity: ${isTimerRunning && globalTimeLeft > 0 ? '0.5' : '1'}; cursor: ${isTimerRunning && globalTimeLeft > 0 ? 'not-allowed' : 'pointer'};"
                            ${isTimerRunning && globalTimeLeft > 0 ? 'disabled' : ''}>
                            Resend OTP
                        </button>
                        <div id="otpMessage" class="mt-3" style="font-size: 0.8rem; color: ${errorMessage ? '#dc3545' : '#28a745'};">
                            ${errorMessage || ''}
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Verify OTP',
                confirmButtonColor: '#ff9900',
                cancelButtonColor: '#6c757d',
                focusConfirm: false,
                allowOutsideClick: false,
                allowEscapeKey: false,
                customClass: {
                    popup: 'rounded-3',
                    title: 'fs-4 fw-bold text-dark',
                    confirmButton: 'btn-accent',
                },
                preConfirm: () => {
                    const otp = document.getElementById('otpInput').value;
                    if (!otp) {
                        Swal.showValidationMessage('Please enter the OTP');
                    }
                    return { otp: otp };
                },
                didOpen: () => {
                    const timerElement = document.getElementById('otpTimer');
                    const resendBtn = document.getElementById('resendOtpBtn');
                    
                    // Start or continue the countdown
                    if (!isTimerRunning) {
                        // If timer is not running, reset and start
                        globalTimeLeft = 60;
                        timerElement.textContent = "01:00";
                        resendBtn.disabled = true;
                    } else {
                        // If timer is already running, update the UI
                        const minutes = Math.floor(globalTimeLeft / 60);
                        const seconds = globalTimeLeft % 60;
                        timerElement.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                        resendBtn.disabled = (globalTimeLeft > 0);
                    }
                    
                    // Start or continue the countdown
                    startOrContinueCountdown(timerElement, resendBtn);
                    
                    // Add event listener to the Resend OTP button
                    resendBtn.addEventListener('click', async () => {
                        // Reset timer
                        globalTimeLeft = 60;
                        timerElement.textContent = "01:00";
                        resendBtn.disabled = true;
                        
                        // Restart countdown
                        startOrContinueCountdown(timerElement, resendBtn);
                        
                        try {
                            // Call the resend OTP endpoint with the user's email
                            const resendResponse = await fetch("/user/resend-otp", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ email: email })
                            });
                            
                            const resendData = await resendResponse.json();
                            console.log("Resend OTP response:", resendData);
                            
                            const otpMessageDiv = document.getElementById("otpMessage");
                            if (resendResponse.ok) {
                                otpMessageDiv.textContent = "A new OTP has been sent to your email.";
                                otpMessageDiv.style.color = "#28a745";
                                setTimeout(() => {
                                    otpMessageDiv.textContent = "";
                                }, 2000);
                            } else {
                                otpMessageDiv.style.color = "#dc3545";
                                otpMessageDiv.textContent = resendData.message || "Unable to resend OTP. Please try again later.";
                                setTimeout(() => {
                                    otpMessageDiv.textContent = "";
                                    otpMessageDiv.style.color = "#28a745";
                                }, 2000);
                            }
                        } catch (error) {
                            console.error("Error during resend OTP:", error);
                            const otpMessageDiv = document.getElementById("otpMessage");
                            otpMessageDiv.style.color = "#dc3545";
                            otpMessageDiv.textContent = "Failed to resend OTP. Please try again.";
                            setTimeout(() => {
                                otpMessageDiv.textContent = "";
                                otpMessageDiv.style.color = "#28a745";
                            }, 2000);
                        }
                    });
                }
            });
            
            return result;
        }

        // Helper function to format time
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `${minutes < 10 ? '0' : ''}${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
        }

        // Main form submission handler
        document.getElementById("signupForm").addEventListener("submit", async function (event) {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(this);
            const jsonData = Object.fromEntries(formData.entries());

            document.querySelectorAll(".text-danger").forEach(el => el.textContent = "");

            let isValid = true;

            // Validate each field and show error messages in respective input fields
            if (!jsonData.name) {
                document.getElementById("nameError").textContent = "Name is required";
                isValid = false;
            }
            if (!jsonData.email) {
                document.getElementById("emailError").textContent = "Email is required";
                isValid = false;
            } else {
                // Email validation
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(jsonData.email)) {
                    document.getElementById("emailError").textContent = "Invalid email format";
                    isValid = false;
                }
            }
            if (!jsonData.password) {
                document.getElementById("passwordError").textContent = "Password is required";
                isValid = false;
            }
            if (!jsonData.confirmPassword) {
                document.getElementById("confirmPasswordError").textContent = "Confirm Password is required";
                isValid = false;
            } else if (jsonData.password !== jsonData.confirmPassword) {
                document.getElementById("confirmPasswordError").textContent = "Passwords do not match";
                isValid = false;
            }
            if (!jsonData.phonenumber) {
                document.getElementById("phoneError").textContent = "Phone number is required";
                isValid = false;
            } else {
                // Phone number validation (Indian format)
                const phonePattern = /^[6-9]\d{9}$/;
                if (!phonePattern.test(jsonData.phonenumber)) {
                    document.getElementById("phoneError").textContent = "Invalid phone number format";
                    isValid = false;
                }
            }

            if (!isValid) return; // Stop form submission if validation fails

            try {
                // Show loader before sending the request
                showLoader();
                
                // Send signup request
                const response = await fetch("/user/signup", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(jsonData)
                });

                const data = await response.json();
                console.log("Signup response:", data);
                
                if (response.ok) {
                  hideLoader();
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Sent!',
                        text: 'Please verify your email with the OTP sent to your inbox.',
                        timer: 3000,
                        showConfirmButton: false
                    }).then(async () => {
                        // Save user email in localStorage for later use
                        localStorage.setItem("userEmail", jsonData.email);
                        
                        // Reset timer for new OTP session
                        resetTimer();
                        
                        // Start OTP verification flow
                        let otpVerified = false;
                        let errorMessage = null;
                        
                        while (!otpVerified) {
                            const result = await showOTPModal(jsonData.email, errorMessage);
                            
                            if (result.isConfirmed) {
                                // Show loader when verifying OTP
                                showLoader();
                                
                                const otpValue = result.value.otp;
                                const verificationResult = await verifyOTP(jsonData.email, otpValue);
                                
                                if (verificationResult.success) {
                                    otpVerified = true;
                                    hideLoader();
                                } else {
                                    errorMessage = verificationResult.message;
                                    hideLoader();
                                }
                            } else {
                                // User cancelled the OTP verification
                                hideLoader();
                                break;
                            }
                        }
                    });
                } else { 
                    hideLoader(); // Hide loader if signup fails
                    Swal.fire({
                        icon: 'error',
                        title: 'Sign-up Failed',
                        text: data.message || 'Something went wrong. Please try again.'
                    });
                }
            } catch (error) {
                hideLoader(); // Hide loader if there's an error
                console.error("Error:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'Failed to connect to the server. Please check your connection.'
                });
            }
        });
    </script>
</body>
</html>