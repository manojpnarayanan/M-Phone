<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Sign Up</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Add Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Add Toastify CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <!-- Add Toastify JS -->
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <style>
    body {
      background: linear-gradient(135deg, #667eea, #764ba2);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .card {
      border-radius: 15px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    .btn-brand {
      background: #764ba2;
      color: #fff;
    }
    .btn-brand:hover {
      background: #5a3e80;
    }
    .btn-google {
      background-color: #db4437;
      color: #fff;
    }
    .btn-google:hover {
      background-color: #c1351d;
    }
    .error-message {
      color:red;
      font-size: 12px;
      margin-left: 5px;
    }
    /* Custom toast styling */
    .toastify {
      padding: 12px 20px;
      color: white;
      display: inline-block;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      background: linear-gradient(135deg, #ff5f6d, #ffc371);
      position: fixed;
      opacity: 0;
      transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
      border-radius: 8px;
      cursor: pointer;
      text-decoration: none;
      max-width: 300px;
      z-index: 9999;
    }
  </style>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            brand: {
              light: '#8a63b8',
              DEFAULT: '#764ba2',
              dark: '#5a3e80',
            },
            google: {
              DEFAULT: '#db4437',
              dark: '#c1351d',
            }
          },
          boxShadow: {
            card: '0 10px 25px -5px rgba(0, 0, 0, 0.1)',
          }
        }
      }
    }
  </script>
</head>
<body class="bg-gradient-to-br from-indigo-400 to-purple-600 min-h-screen flex items-center justify-center p-4">
  <!-- Loader Overlay -->
  <div id="loaderOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center">
      <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-brand"></div>
      <p class="mt-4 text-gray-700 font-medium">Processing your request...</p>
    </div>
  </div>

  <div class="container">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <div class="card p-4 shadow-card bg-white backdrop-blur-sm bg-opacity-95">
          <div class="card-header text-center bg-white border-0">
            <h4 class="text-2xl font-bold text-gray-800 mb-1">Sign Up</h4>
            <p class="text-sm text-gray-500">Create your account to get started</p>
          </div>
          <div class="card-body">
            <form id="signupForm" class="space-y-4">
              <div class="mb-3">
                <label for="name" class="form-label font-medium text-gray-700">Full Name</label>
                <input type="text" class="form-control focus:ring-2 focus:ring-brand focus:border-brand" id="name" name="name" placeholder="Name" />
                <span id="nameError" class="error-message"></span>  
              </div>
              <div class="mb-3">
                <label for="email" class="form-label font-medium text-gray-700">Email</label>
                <input type="email" class="form-control focus:ring-2 focus:ring-brand focus:border-brand" id="email" name="email" placeholder="you@example.com" />
                <span id="emailError" class="error-message"></span>
              </div>
              <div class="mb-3">
                <label for="password" class="form-label font-medium text-gray-700">Password</label>
                <input type="password" class="form-control focus:ring-2 focus:ring-brand focus:border-brand" id="password" name="password" />
                <span id="passwordError" class="error-message"></span>
              </div>
              <div class="mb-3">
                <label for="confirmPassword" class="form-label font-medium text-gray-700">Confirm Password</label>
                <input type="password" class="form-control focus:ring-2 focus:ring-brand focus:border-brand" id="confirmPassword" name="confirmPassword"  />
                <span id="confirmPasswordError" class="error-message"></span>
              </div>
              <div class="mb-3">
                <label for="phone" class="form-label font-medium text-gray-700">Phone Number</label>
                <input type="text" class="form-control focus:ring-2 focus:ring-brand focus:border-brand" id="phone" name="phonenumber"  />
                <span id="phoneError" class="error-message"></span>
              </div>
              <button type="submit" class="btn btn-brand w-100 py-2.5 rounded-lg transition-all duration-200 hover:shadow-lg transform hover:-translate-y-0.5">Sign Up</button>
            </form>
            <hr class="my-4" />
            <button class="btn btn-google w-100 mt-2 py-2.5 rounded-lg flex items-center justify-center gap-2 transition-all duration-200 hover:shadow-lg" onclick="location.href='/user/google'">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="white" class="inline-block mr-2">
                <path d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"/>
              </svg>
              Sign Up with Google
            </button>
            <hr class="my-4" />
            <a href="/user/login" class="d-block text-center text-brand hover:text-brand-dark transition-colors">Already have an account? Login</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Signup & OTP Modal Script -->
  <script>
    // Global variables to track OTP timer state
    let globalTimeLeft = 60;
    let globalCountdownInterval = null;
    let isTimerRunning = false;

    // Function to show loader
    function showLoader() {
      document.getElementById('loaderOverlay').classList.remove('hidden');
    }

    // Function to hide loader
    function hideLoader() {
      document.getElementById('loaderOverlay').classList.add('hidden');
    }

    // Function to start or continue the countdown
    function startOrContinueCountdown(timerElement, resendBtn) {
      // Clear any existing interval
      if (globalCountdownInterval) {
        clearInterval(globalCountdownInterval);
      }

      isTimerRunning = true;
      
      globalCountdownInterval = setInterval(() => {
        if (globalTimeLeft <= 0) {
          clearInterval(globalCountdownInterval);
          timerElement.textContent = "00:00";
          resendBtn.disabled = false;
          isTimerRunning = false;
        } else {
          globalTimeLeft--;
          const minutes = Math.floor(globalTimeLeft / 60);
          const seconds = globalTimeLeft % 60;
          timerElement.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        }
      }, 1000);
    }

    // Function to reset the timer
    function resetTimer() {
      if (globalCountdownInterval) {
        clearInterval(globalCountdownInterval);
      }
      globalTimeLeft = 60;
      isTimerRunning = false;
    }

    // Function to handle OTP verification
    async function verifyOTP(email, otpValue) {
      try {
        const otpResponse = await fetch(`/user/otp/validate/${encodeURIComponent(email)}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ otp: otpValue })
        });
        
        const otpData = await otpResponse.json();
        console.log("OTP verification response:", otpData);
        
        if (otpResponse.ok) {
          // Clear timer on successful verification
          if (globalCountdownInterval) {
            clearInterval(globalCountdownInterval);
          }
          
          Swal.fire({
            icon: 'success',
            title: 'OTP Verified!',
            text: otpData.message,
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            window.location.href = otpData.redirect; // e.g., "/user/login"
          });
          
          return { success: true };
        } else {
          // Show toast for invalid OTP
          Toastify({
            text: otpData.message || 'Invalid OTP, please try again.',
            duration: 3000,
            gravity: "bottom",
            position: "center",
            backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
            stopOnFocus: true,
            className: "rounded-lg shadow-lg",
            onClick: function(){}
          }).showToast();
          
          return { 
            success: false, 
            message: otpData.message || 'Invalid OTP, please try again.'
          };
        }
      } catch (error) {
        console.error("Error during OTP verification:", error);
        
        Toastify({
          text: 'Failed to verify OTP. Please try again.',
          duration: 3000,
          gravity: "bottom",
          position: "center",
          backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
          stopOnFocus: true,
          className: "rounded-lg shadow-lg",
          onClick: function(){}
        }).showToast();
        
        return { 
          success: false, 
          message: 'Network error. Please try again.' 
        };
      }
    }

    // Function to show OTP modal
    async function showOTPModal(email, errorMessage = null) {
      hideLoader(); // Hide loader before showing OTP modal
      
      const result = await Swal.fire({
        title: 'Enter OTP',
        html: `
          <div class="p-2">
            <p class="text-sm text-gray-600 mb-3">We've sent a verification code to your email</p>
            <input id="otpInput" class="swal2-input focus:ring-2 focus:ring-brand focus:border-brand" placeholder="Enter OTP">
            <div id="otpTimer" class="mt-3 text-base font-medium text-gray-700">
              ${isTimerRunning ? formatTime(globalTimeLeft) : '01:00'}
            </div>
            <button id="resendOtpBtn" class="swal2-confirm swal2-styled mt-3 bg-brand disabled:opacity-50 disabled:cursor-not-allowed" 
              ${isTimerRunning && globalTimeLeft > 0 ? 'disabled' : ''}>
              Resend OTP
            </button>
            <div id="otpMessage" class="mt-3 text-sm ${errorMessage ? 'text-red-500' : 'text-green-500'}">
              ${errorMessage || ''}
            </div>
          </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Verify OTP',
        confirmButtonColor: '#764ba2',
        cancelButtonColor: '#6B7280',
        focusConfirm: false,
        allowOutsideClick: false,
        allowEscapeKey: false,
        customClass: {
          popup: 'rounded-xl',
          title: 'text-xl font-bold text-gray-800',
          confirmButton: 'bg-brand hover:bg-brand-dark',
        },
        preConfirm: () => {
          const otp = document.getElementById('otpInput').value;
          if (!otp) {
            Swal.showValidationMessage('Please enter the OTP');
          }
          return { otp: otp };
        },
        didOpen: () => {
          const timerElement = document.getElementById('otpTimer');
          const resendBtn = document.getElementById('resendOtpBtn');
          
          // Start or continue the countdown
          if (!isTimerRunning) {
            // If timer is not running, reset and start
            globalTimeLeft = 60;
            timerElement.textContent = "01:00";
            resendBtn.disabled = true;
          } else {
            // If timer is already running, update the UI
            const minutes = Math.floor(globalTimeLeft / 60);
            const seconds = globalTimeLeft % 60;
            timerElement.textContent = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            resendBtn.disabled = (globalTimeLeft > 0);
          }
          
          // Start or continue the countdown
          startOrContinueCountdown(timerElement, resendBtn);
          
          // Add event listener to the Resend OTP button
          resendBtn.addEventListener('click', async () => {
            // Reset timer
            globalTimeLeft = 60;
            timerElement.textContent = "01:00";
            resendBtn.disabled = true;
            
            // Restart countdown
            startOrContinueCountdown(timerElement, resendBtn);
            
            try {
              // Call the resend OTP endpoint with the user's email
              const resendResponse = await fetch("/user/resend-otp", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email: email })
              });
              
              const resendData = await resendResponse.json();
              console.log("Resend OTP response:", resendData);
              
              const otpMessageDiv = document.getElementById("otpMessage");
              if (resendResponse.ok) {
                otpMessageDiv.textContent = "A new OTP has been sent to your email.";
                otpMessageDiv.style.color = "green";
                setTimeout(() => {
                  otpMessageDiv.textContent = "";
                }, 2000);
              } else {
                otpMessageDiv.style.color = "red";
                otpMessageDiv.textContent = resendData.message || "Unable to resend OTP. Please try again later.";
                setTimeout(() => {
                  otpMessageDiv.textContent = "";
                  otpMessageDiv.style.color = "green";
                }, 2000);
              }
            } catch (error) {
              console.error("Error during resend OTP:", error);
              const otpMessageDiv = document.getElementById("otpMessage");
              otpMessageDiv.style.color = "red";
              otpMessageDiv.textContent = "Failed to resend OTP. Please try again.";
              setTimeout(() => {
                otpMessageDiv.textContent = "";
                otpMessageDiv.style.color = "green";
              }, 2000);
            }
          });
        }
      });
      
      return result;
    }

    // Helper function to format time
    function formatTime(seconds) {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes < 10 ? '0' : ''}${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
    }

    // Main form submission handler
    document.getElementById("signupForm").addEventListener("submit", async function (event) {
      event.preventDefault(); // Prevent default form submission

      const formData = new FormData(this);
      const jsonData = Object.fromEntries(formData.entries());

      document.querySelectorAll(".error-message").forEach(el => el.textContent = "");

      let isValid = true;

      // Validate each field and show error messages in respective input fields
      if (!jsonData.name) {
        document.getElementById("nameError").textContent = "Name is required";
        isValid = false;
      }
      if (!jsonData.email) {
        document.getElementById("emailError").textContent = "Email is required";
        isValid = false;
      } else {
        // Email validation
        const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailPattern.test(jsonData.email)) {
          document.getElementById("emailError").textContent = "Invalid email format";
          isValid = false;
        }
      }
      if (!jsonData.password) {
        document.getElementById("passwordError").textContent = "Password is required";
        isValid = false;
      }
      if (!jsonData.confirmPassword) {
        document.getElementById("confirmPasswordError").textContent = "Confirm Password is required";
        isValid = false;
      } else if (jsonData.password !== jsonData.confirmPassword) {
        document.getElementById("confirmPasswordError").textContent = "Passwords do not match";
        isValid = false;
      }
      if (!jsonData.phonenumber) {
        document.getElementById("phoneError").textContent = "Phone number is required";
        isValid = false;
      } else {
        // Phone number validation (Indian format)
        const phonePattern = /^[6-9]\d{9}$/;
        if (!phonePattern.test(jsonData.phonenumber)) {
          document.getElementById("phoneError").textContent = "Invalid phone number format";
          isValid = false;
        }
      }

      if (!isValid) return; // Stop form submission if validation fails

      try {
        // Show loader before sending the request
        showLoader();
        
        // Send signup request
        const response = await fetch("/user/signup", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(jsonData)
        });

        const data = await response.json();
        console.log("Signup response:", data);
        
        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Sign-up Successful!',
            text: 'Please verify your email with the OTP sent to your inbox.',
            timer: 3000,
            showConfirmButton: false
          }).then(async () => {
            // Save user email in localStorage for later use
            localStorage.setItem("userEmail", jsonData.email);
            
            // Reset timer for new OTP session
            resetTimer();
            
            // Start OTP verification flow
            let otpVerified = false;
            let errorMessage = null;
            
            while (!otpVerified) {
              const result = await showOTPModal(jsonData.email, errorMessage);
              
              if (result.isConfirmed) {
                // Show loader when verifying OTP
                showLoader();
                
                const otpValue = result.value.otp;
                const verificationResult = await verifyOTP(jsonData.email, otpValue);
                
                if (verificationResult.success) {
                  otpVerified = true;
                  hideLoader();
                } else {
                  errorMessage = verificationResult.message;
                  hideLoader();
                }
              } else {
                // User cancelled the OTP verification
                hideLoader();
                break;
              }
            }
          });
        } else { 
          hideLoader(); // Hide loader if signup fails
          Swal.fire({
            icon: 'error',
            title: 'Sign-up Failed',
            text: data.message || 'Something went wrong. Please try again.'
          });
        }
      } catch (error) {
        hideLoader(); // Hide loader if there's an error
        console.error("Error:", error);
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: 'Failed to connect to the server. Please check your connection.'
        });
      }
    });
  </script>
</body>
</html>