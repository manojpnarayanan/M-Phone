<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - M Store</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Add Razorpay script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
        }

        body {
            background-color: #f1f3f6;
            color: #212121;
            line-height: 1.4;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header Styles */
        .header {
            background-color:black;
            padding: 10px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .logo {
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-decoration: none;
        }

        .secure-checkout {
            display: flex;
            align-items: center;
            color: white;
        }

        .secure-checkout i {
            margin-right: 5px;
            font-size: 18px;
        }

        /* Checkout Steps */
        .checkout-steps {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            padding: 10px 0;
            position: relative;
        }

        .step {
            width: 25%;
            text-align: center;
            font-weight: 500;
        }

        .step-indicator {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #e0e0e0;
            color: #757575;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 8px;
            font-weight: bold;
        }

        .step.active .step-indicator {
            background-color: #2874f0;
            color: white;
        }

        .step-name {
            color: #757575;
            font-size: 14px;
        }

        .step.active .step-name {
            color: #2874f0;
        }

        .step-connector {
            position: absolute;
            top: 25px;
            height: 2px;
            background-color: #e0e0e0;
            width: 75%;
            left: 12.5%;
            z-index: -1;
        }

        /* Main Content Layout */
        .checkout-content {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .checkout-left {
            flex: 3;
            min-width: 300px;
        }

        .checkout-right {
            flex: 1;
            min-width: 300px;
        }

        /* Card Styles */
        .card {
            background-color: white;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .card-header {
            padding: 12px 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #eeeeee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 16px;
            font-weight: 500;
            color: #212121;
        }

        .card-body {
            padding: 15px;
        }

        /* Form Controls */
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-size: 14px;
            color: #212121;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #d4d5d9;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.15s ease-in-out;
        }

        .form-control:focus {
            border-color: #2874f0;
            outline: none;
        }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .form-col {
            flex: 1;
            min-width: 200px;
        }

        /* Address Card */
        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .address-card.selected {
            border-color: #2874f0;
            background-color: #f0f5ff;
        }

        .address-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        /* Payment Methods */
        .payment-option {
            padding: 15px;
            border-bottom: 1px solid #eeeeee;
            display: flex;
            align-items: center;
        }

        .payment-option:last-child {
            border-bottom: none;
        }

        .payment-radio {
            margin-right: 10px;
        }

        .payment-logo {
            width: 30px;
            height: 30px;
            margin-right: 10px;
        }

        /* Order Summary */
        .order-item {
            display: flex;
            padding: 10px 0;
            border-bottom: 1px solid #eeeeee;
        }

        .item-image {
            width: 50px;
            height: 50px;
            object-fit: contain;
            margin-right: 10px;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 5px;
        }

        .item-variant {
            font-size: 12px;
            color: #757575;
        }

        .item-price {
            font-weight: 500;
            text-align: right;
        }

        .price-summary {
            padding: 10px 0;
        }

        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .price-label {
            color: #757575;
        }

        .total-row {
            font-weight: bold;
            font-size: 16px;
            padding-top: 10px;
            border-top: 1px dashed #eeeeee;
        }

        /* Buttons */
        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 500;
            text-align: center;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .btn-primary {
            background-color: #fb641b;
            color: white;
        }

        .btn-primary:hover {
            background-color: #e85f19;
        }

        .btn-secondary {
            background-color: #2874f0;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #2362c7;
        }

        .btn-outlined {
            background-color: white;
            color: #2874f0;
            border: 1px solid #2874f0;
        }

        .btn-outlined:hover {
            background-color: #f0f5ff;
        }

        .btn-danger {
            background-color: white;
            color: #ff6161;
            border: 1px solid #ff6161;
        }

        .btn-danger:hover {
            background-color: #fff0f0;
        }

        .btn-block {
            width: 100%;
            display: block;
        }

        /* Delivery Info */
        .delivery-info {
            display: flex;
            align-items: center;
            margin-top: 15px;
            font-size: 14px;
            color: #388e3c;
        }

        .delivery-icon {
            margin-right: 5px;
        }

        /* Promo Code */
        .promo-form {
            display: flex;
            gap: 10px;
        }

        .promo-input {
            flex: 1;
        }

        .coupons-list {
            margin-top: 10px;
        }

        .coupon {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border: 1px dashed #e0e0e0;
            border-radius: 4px;
            margin-bottom: 10px;
            background-color: #fafafa;
        }

        .coupon.applied {
            border-color: #388e3c;
            background-color: #f0fff0;
        }

        .coupon-code {
            font-weight: bold;
            color: #2874f0;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .checkout-content {
                flex-direction: column;
            }

            .checkout-steps {
                overflow-x: auto;
                padding-bottom: 5px;
            }

            .step {
                min-width: 100px;
            }
        }

        .payment-logo {
            font-size: 24px;
            /* Adjust size */
            color: #2874f0;
            /* Adjust color */
            margin-right: 10px;
            /* Adjust spacing */
        }

        /* Razorpay logo styling */
        .razorpay-logo {
            height: 24px;
            margin-right: 10px;
        }

        /* Retry payment button */
        .retry-payment {
            margin-top: 10px;
            display: none;
        }
    </style>
</head>

<body>
    <!-- Header -->
    <header class="header" >
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo">M Store</a>
                <div class="secure-checkout">
                    <i>ðŸ”’</i> Secure Checkout
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="container">
        <!-- Checkout Steps -->
        <div class="checkout-steps">
            <div class="step-connector"></div>
            <div class="step active">
                <div class="step-indicator">1</div>
                <div class="step-name">Login</div>
            </div>
            <div class="step active">
                <div class="step-indicator">2</div>
                <div class="step-name">Delivery Address</div>
            </div>
            <div class="step active">
                <div class="step-indicator">3</div>
                <div class="step-name">Order Summary</div>
            </div>
            <div class="step">
                <div class="step-indicator">4</div>
                <div class="step-name">Payment</div>
            </div>
        </div>

        <!-- Checkout Content -->
        <div class="checkout-content">
            <!-- Left Section -->
            <div class="checkout-left">
                <!-- Delivery Address -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Delivery Address</h3>
                        <a href="/user/myprofile/addaddress/<%= user._id%>" class="btn btn-outlined">+ Add New Address</a>
                    </div>
                    <div class="card-body">
                        <% if (addresses && addresses.length> 0) { %>
                            <% addresses.forEach((address, index)=> { %>
                                <div class="address-card <%= index === 0 ? 'selected' : '' %>">
                                    <input type="radio" name="address" id="address<%= index %>"
                                        value="<%= address._id %>" <%=index===0 ? 'checked' : '' %>>
                                    <label for="address<%= index %>">
                                        <strong>
                                            <%= address.name %>
                                        </strong>
                                        <p>
                                            <%= address.housename %>, <%= address.city %>, <%= address.state %> - <%=
                                                            address.pincode %><br>
                                                            Phone: <%= address.mobilenumber %><br>
                                                                Type: <%= address.addresstype %>
                                        </p>
                                    </label>
                                    <!-- <div class="address-actions">
                                        <button class="btn btn-outlined">Edit</button>
                                        <button class="btn btn-outlined">Remove</button>
                                    </div> -->
                                </div>
                                <% }) %>
                                    <% } else { %>
                                        <p>No addresses found. Please add one.</p>
                                        <% } %>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Order Items (<%= totalItems %>)</h3>
                    </div>
                    <div class="card-body">
                        <% if (product && product.length> 0) { %>
                            <% product.forEach(item=> { %>
                                <div class="order-item">
                                    <img src="/<%= item.product.image[0] %>" alt="<%= item.product.name %>"
                                        class="item-image">
                                    <div class="item-details">
                                        <div class="item-name">
                                            <%= item.product.name %>
                                        </div>
                                        <div class="item-variant">
                                            <%= item.product.variant %>
                                        </div>
                                        <div class="delivery-info">
                                            <span class="delivery-icon">ðŸ“¦</span>
                                            Delivery by <%= item.product.estimatedDeliveryDate %>
                                        </div>
                                    </div>
                                    <div class="item-price">â‚¹<%= (item.product.price - item.product.discount) *
                                            item.quantity %>
                                    </div>
                                </div>
                                <% }) %>
                                    <% } else { %>
                                        <p>No items in the cart.</p>
                                        <% } %>
                    </div>
                </div>
                <!-- Payment Options -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Payment Options</h3>
                    </div>
                    <div class="card-body">
                        <div class="payment-option">
                            <input type="radio" name="paymentMethod" id="cod" value="cash_on_delivery"
                                class="payment-radio">
                            <i class="fas fa-money-bill-wave payment-logo"></i>
                            <label for="cod">Cash on Delivery</label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" name="paymentMethod" id="rzp" value="razor-pay"
                                class="payment-radio" checked>
                            <img src="https://razorpay.com/assets/razorpay-glyph.svg" alt="Razorpay" class="razorpay-logo">
                            <label for="rzp">Razorpay</label>
                        </div>
                        
                        <button id="payButton" onclick="processPayment()" class="btn btn-primary btn-block" style="margin-top: 20px;">Pay
                            â‚¹<span id="finalPayAmount"><%= (totalPrice - totalDiscount - (couponDiscount || 0) + deliveryCharges + gst).toFixed(2) %></span></button>
                        
                        <button id="retryPayment" onclick="retryPayment()" class="btn btn-secondary btn-block retry-payment">
                            Retry Payment
                        </button>
                    </div>
                </div>
            </div>

            <!-- Right Section -->
            <div class="checkout-right">
                <!-- Order Summary -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Price Details</h3>
                    </div>
                    <div class="card-body">
                        <div class="price-summary">
                            <div class="price-row">
                                <div class="price-label">Price (<%= totalItems %> items)</div>
                                <div class="price-value" id="totalPrice">â‚¹<%= totalPrice %></div>
                            </div>
                            <div class="price-row">
                                <div class="price-label">Discount</div>
                                <div class="price-value" style="color: #388e3c;" id="totalDiscount">-â‚¹<%= totalDiscount %></div>
                            </div>
                            <div id="couponDiscountRow" class="price-row" style="<%= couponDiscount && couponDiscount > 0 ? '' : 'display: none;' %>">
                                <div class="price-label">Coupon Discount <span id="appliedCouponCode"><% if (appliedCouponCode) { %>(<%= appliedCouponCode %>)<% } %></span></div>
                                <div class="price-value" style="color: #388e3c;" id="couponDiscount">-â‚¹<%= couponDiscount ? couponDiscount.toFixed(2) : '0.00' %></div>
                            </div>
                            <div class="price-row">
                                <div class="price-label">Delivery Charges</div>
                                <div class="price-value" style="color: #388e3c;" id="deliveryCharges">
                                    <% if (totalPrice > 50000) { %>
                                        FREE
                                    <% } else { %>
                                        â‚¹100
                                    <% } %>
                                </div>
                            </div>
                            <div class="price-row">
                                <div class="price-label">GST (18%)</div>
                                <div class="price-value" id="gst">â‚¹<%= gst.toFixed(2) %></div>
                            </div>
                            <div class="price-row total-row">
                                <div class="price-label">Total Amount</div>
                                <div class="price-value" id="totalAmount">â‚¹<%= (totalPrice - totalDiscount - (couponDiscount || 0) + deliveryCharges + gst).toFixed(2) %></div>
                            </div>
                        </div>

                        <div id="savingsMessage" style="color: #388e3c; margin-top: 10px; font-weight: 500;">
                            You will save â‚¹<span id="totalSavings"><%= (totalDiscount + (couponDiscount || 0)).toFixed(2) %></span> on this order
                        </div>
                    </div>
                </div>

                <!-- Promo Code -->
                <!-- Promo Code Section -->
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Promo Code</h3>
    </div>
    <div class="card-body">
        <div class="coupons-list">
            <% if (coupons && coupons.length > 0) { %>
                <% coupons.forEach(coupon => { %>
                    <div class="coupon <%= coupon.code === appliedCouponCode ? 'applied' : '' %>" 
                         data-code="<%= coupon.code %>" 
                         data-id="<%= coupon._id %>" 
                         data-discount-type="<%= coupon.discountType %>" 
                         data-discount-value="<%= coupon.discountValue %>" 
                         data-min-order="<%= coupon.minOrderAmount || 0 %>"
                         data-max-discount="<%= coupon.maxDiscountAmount || 0 %>">
                        <div>
                            <div class="coupon-code"><%= coupon.code %></div>
                            <div>
                                <% if (coupon.discountType === 'percentage') { %>
                                    <%= coupon.discountValue %>% off
                                    <% if (coupon.maxDiscountAmount) { %>
                                        up to â‚¹<%= coupon.maxDiscountAmount %>
                                    <% } %>
                                <% } else { %>
                                    â‚¹<%= coupon.discountValue %> off
                                <% } %>
                                <% if (coupon.minOrderAmount > 0) { %>
                                    (Min. order: â‚¹<%= coupon.minOrderAmount %>)
                                <% } %>
                            </div>
                        </div>
                        <% if (coupon.code === appliedCouponCode) { %>
                            <button onclick="removeCoupon('<%= coupon._id %>', '<%= user._id %>')" class="btn btn-danger">Remove</button>
                        <% } else { %>
                            <button onclick="applyCoupon('<%= coupon._id %>', '<%= user._id %>')" class="btn btn-outlined">Apply</button>
                        <% } %>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-coupons">No active coupons available</div>
            <% } %>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
</body>

</html>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Store original values for calculations
    const originalValues = {
        totalPrice: <%= totalPrice %>,
        totalDiscount: <%= totalDiscount %>,
        couponDiscount: <%= couponDiscount || 0 %>,
        deliveryCharges: <%= deliveryCharges %>,
        gst: <%= gst %>
    };

    // Store order data for retry functionality
    let lastOrderData = null;
    let razorpayOrderId = null;

    // Function to process payment based on selected method
    async function processPayment() {
        try {
            // Check if a payment method is selected
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPaymentMethod) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a payment method.'
                });
                return; // Stop execution if no payment method is selected
            }
            
            // Check if an address is selected
            const selectedAddress = document.querySelector('input[name="address"]:checked');
            if (!selectedAddress) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a delivery address.'
                });
                return; // Stop execution if no address is selected
            }
            
            // Get the current total amount from the UI
            const selectedCoupon = document.querySelector('.coupon.applied');
const couponCode = selectedCoupon ? selectedCoupon.getAttribute('data-code') : '';

            const currentTotalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('â‚¹', ''));
            const couponDiscount = document.getElementById('couponDiscountRow').style.display !== 'none' 
                ? parseFloat(document.getElementById('couponDiscount').textContent.replace('-â‚¹', ''))
                : 0;
            
            // Gather data from the page
            const orderData = {
                userId: "<%= user._id %>",
                shippingAddress: selectedAddress.value,
                totalAmount: "<%= totalPrice %>",
                discount: "<%= totalDiscount %>",
                couponDiscount: couponDiscount,
                finalAmount: currentTotalAmount.toFixed(2),
                products: [
                    <% product.forEach((item, index) => { %>
                {
                    product: "<%= item.product._id %>",
                    quantity: "<%= item.quantity %>",
                    price: "<%= item.product.price %>"
                },
                    <% }) %>
                ],
                paymentMethod: selectedPaymentMethod.value,
                couponApplied: {
                    code: couponCode,
                    discountAmount: couponDiscount
                }
            };

            // Save order data for retry functionality
            lastOrderData = orderData;

            // If payment method is Cash on Delivery, use the existing placeOrder function
            if (selectedPaymentMethod.value === 'cash_on_delivery') {
                placeOrder();
                return;
            }

            // If payment method is Razorpay, initiate Razorpay payment
            if (selectedPaymentMethod.value === 'razor-pay') {
                // Show loading state
                Swal.fire({
                    title: 'Initializing payment...',
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    allowOutsideClick: false,
                    showConfirmButton: false
                });

                // Create Razorpay order
                const response = await fetch('/user/myprofile/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        amount: currentTotalAmount * 100, // Razorpay expects amount in paise
                        currency: 'INR',
                        receipt: 'order_' + Date.now(),
                        orderData: orderData
                    })
                });

                const result = await response.json();
                
                if (!response.ok) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Failed to create payment order. Please try again.'
                    });
                    return;
                }

                // Close loading dialog
                Swal.close();

                // Store Razorpay order ID for retry functionality
                razorpayOrderId = result.orderId;

                // Initialize Razorpay payment
                const options = {
                    key: '<%= process.env.KEY_ID %>', // Your Razorpay Key ID
                    amount: currentTotalAmount * 100, // Amount in paise
                    currency: 'INR',
                    name: 'M Store',
                    description: 'Purchase from M Store',
                    order_id: result.orderId,
                    handler: async function (response) {
                        // Show loading state
                        Swal.fire({
                            title: 'Verifying payment...',
                            didOpen: () => {
                                Swal.showLoading();
                            },
                            allowOutsideClick: false,
                            showConfirmButton: false
                        });

                        try {
                            // Verify payment with your server
                            const verifyResponse = await fetch('/user/myprofile/verify-razorpay-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderData: orderData
                                })
                            });

                            const verifyResult = await verifyResponse.json();
                            console.log("verifyResult",verifyResult)

                            if (verifyResponse.ok) {
                                // Show success message
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful!',
                                    text: 'Your order has been placed successfully.',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    // Redirect to order confirmation page
                                    window.location.href = `/user/myprofile/order-confirmed/${verifyResult.orderId}`;
                                });
                            } else {
                                Swal.fire({
                icon: 'error',
                title: 'Payment Verification Failed',
                text: 'Taking you to retry page...',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = `/user/myprofile/failed-payment/${verifyResult.orderId}`;
            });
                                // Show error message
                                // Swal.fire({
                                //     icon: 'error',
                                //     title: 'Payment Verification Failed',
                                //     text: verifyResult.message || 'Failed to verify payment. Please contact support.',
                                //     confirmButtonText: 'OK'
                                // });
                                
                                // Show retry button
                                // document.getElementById('retryPayment').style.display = 'block';
                                // window.location.href="/user/myprofile/failed-paymentpage"
                            }
                        } catch (error) {
                            console.error("Error verifying payment:", error);
                            // Create an order anyway but mark it as payment_failed, then redirect
        fetch('/user/myprofile/create-failed-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        })
        .then(response => response.json())
        .then(result => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Taking you to retry page...',
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = `/user/myprofile/failed-payment/${result.orderId}`;
            });
        })
        .catch(err => {
            console.error("Error creating failed order:", err);
            // Fallback to homepage if we can't create an order
            window.location.href = "/user/myprofile/cart";
        });
    }
},
                    //         Swal.fire({
                    //             icon: 'error',
                    //             title: 'Error',
                    //             text: 'An unexpected error occurred during payment verification. Please try again.'
                    //         });
                            
                    //         // Show retry button
                    //         document.getElementById('retryPayment').style.display = 'block';
                    //         // window.location.href="/user/myprofile/failed-paymentpage"

                    //     }
                    // },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    theme: {
                        color: '#2874f0'
                    },
                    modal: {
                        ondismiss: function() {
                            if (!orderData) {
            console.error("Order data is undefined.");
            window.location.href = "/user/myprofile/cart";
            return;
        }
                            // Show retry button when payment modal is dismissed
                            // document.getElementById('retryPayment').style.display = 'block';
                            // window.location.href="/user/myprofile/failed-paymentpage"
                            fetch('/user/myprofile/create-failed-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        })
        .then(response => response.json())
        .then(result => {
            window.location.href = `/user/myprofile/failed-payment/${result.orderId}`;
        })
        .catch(err => {
            console.error("Error creating failed order:", err);
            // Fallback to cart if we can't create an order
            window.location.href = "/user/myprofile/cart";
        });

                        }
                    }
                };

                // Open Razorpay payment form
                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();
            }
        } catch (error) {
            console.error("Error processing payment:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again.'
            });
            
            // Show retry button
            document.getElementById('retryPayment').style.display = 'block';
            // window.location.href="/user/myprofile/failed-paymentpage"

        }
    }

    // Function to retry payment
    function retryPayment() {
        if (lastOrderData) {
            processPayment();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No previous payment attempt found. Please try again.'
            });
        }
    }

    // Function to place the order
    async function placeOrder() {
        try {
            // Check if a payment method is selected
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPaymentMethod) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a payment method.'
                });
                return; // Stop execution if no payment method is selected
            }
            // Check if an address is selected
            const selectedAddress = document.querySelector('input[name="address"]:checked');
            if (!selectedAddress) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a delivery address.'
                });
                return; // Stop execution if no address is selected
            }
            
            // Get the current total amount from the UI
            const selectedCoupon = document.querySelector('.coupon.applied');
const couponCode = selectedCoupon ? selectedCoupon.getAttribute('data-code') : '';

            const currentTotalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('â‚¹', ''));
            const couponDiscount = document.getElementById('couponDiscountRow').style.display !== 'none' 
                ? parseFloat(document.getElementById('couponDiscount').textContent.replace('-â‚¹', ''))
                : 0;
            
            // Gather data from the page
            const orderData = {
                userId: "<%= user._id %>",
                shippingAddress: selectedAddress.value,
                totalAmount: "<%= totalPrice %>",
                discount: "<%= totalDiscount %>",
                couponDiscount: couponDiscount,
                finalAmount: currentTotalAmount.toFixed(2),
                products: [
                    <% product.forEach((item, index) => { %>
                {
                    product: "<%= item.product._id %>",
                    quantity: "<%= item.quantity %>",
                    price: "<%= item.product.price %>"
                },
                    <% }) %>
                ],
                paymentMethod: selectedPaymentMethod.value,
                couponApplied: {
                    code:couponCode,
                    discountAmount: couponDiscount
                }
            };

            // Send the order data to the backend using Fetch API
            const response = await fetch('/user/myprofile/order-placed', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            // Parse the response
            const result = await response.json();
            console.log(result);

            if (response.ok) {
                // Show success message with SweetAlert
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed!',
                    text: 'Your order has been successfully placed.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Redirect to the order confirmation page
                    window.location.href = `/user/myprofile/order-confirmed/${result.orderId}`;
                });
            } else {
                // Show error message with SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to place the order. Please try again.'
                });
            }
        } catch (error) {
            console.error("Error placing order:", error);
            // Show error message with SweetAlert
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again.'
            });
        }
    }
          
    async function applyCoupon(couponId, userId) {
    try {
        // Show loading state
        console.log("Applying coupon:", couponId, "for user:", userId);
        
        Swal.fire({
            title: 'Applying coupon...',
            didOpen: () => {
                Swal.showLoading();
            
            },
            allowOutsideClick: false,
            showConfirmButton: false
        });
        
        const response = await fetch(`/user/myprofile/checkout/${userId}/coupon-applied`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({couponId, userId})
        });

        // console.log("Response status:", response.status);
        const result = await response.json();
        // console.log("Response data:", result);

        if (response.ok) {
            // Get the coupon element and its data
            const couponElement = document.querySelector(`.coupon[data-id="${couponId}"]`);
            const couponCode = couponElement.getAttribute('data-code');
            
            // Update UI with the applied coupon
            updateUIWithCoupon(couponId, couponCode, result.discountAmount);
            
            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: result.message,
                // timer: 2000
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to apply coupon. Please try again.'
            });
        }
    } catch (error) {
        console.error("Error applying coupon:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again.'
        });
    }
}

    async function removeCoupon(couponId, userId) {
        try {
            // Show loading state
            Swal.fire({
                title: 'Removing coupon...',
                didOpen: () => {
                    Swal.showLoading();
                },
                allowOutsideClick: false,
                showConfirmButton: false
            });
            
            // Here you would typically have an API endpoint to remove the coupon
            // For now, we'll simulate it with a timeout
            const response = await fetch(`/user/myprofile/checkout/${userId}/remove-coupon`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({couponId, userId})
            });

            // Assuming the response structure
            const result = await response.json();

            if (response.ok) {
                // Update UI to remove coupon effects
                resetCouponUI();
                
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Removed',
                    text: 'Coupon has been removed successfully.',
                    // timer: 2000
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to remove coupon. Please try again.'
                });
            }
        } catch (error) {
            console.error("Error removing coupon:", error);
            
            // For demo purposes, we'll still update the UI even if there's an error
            // In a real application, you would handle this differently
            resetCouponUI();
            
            Swal.fire({
                icon: 'success',
                title: 'Coupon Removed',
                text: 'Coupon has been removed successfully.',
                // timer: 2000
            });
        }
    }

    // Function to update UI when a coupon is applied
    function updateUIWithCoupon(couponId, couponCode, discountAmount) {
    // 1. Update all coupon buttons - change all to "Apply" except the applied one
    document.querySelectorAll('.coupon').forEach(coupon => {
        const currentCouponId = coupon.getAttribute('data-id');
        const buttonElement = coupon.querySelector('button');
        
        if (currentCouponId === couponId) {
            // This is the applied coupon
            coupon.classList.add('applied');
            buttonElement.className = 'btn btn-danger';
            buttonElement.textContent = 'Remove';
            buttonElement.onclick = function() { 
                removeCoupon(couponId, '<%= user._id %>'); 
            };
        } else {
            // Reset other coupons
            coupon.classList.remove('applied');
            buttonElement.className = 'btn btn-outlined';
            buttonElement.textContent = 'Apply';
            buttonElement.onclick = function() { 
                applyCoupon(currentCouponId, '<%= user._id %>'); 
            };
        }
    });
    
    // 2. Update price details
    const couponDiscountAmount = parseFloat(discountAmount) || 0;
    
    // Show coupon discount row
    document.getElementById('couponDiscountRow').style.display = '';
    document.getElementById('appliedCouponCode').textContent = `(${couponCode})`;
    document.getElementById('couponDiscount').textContent = `-â‚¹${couponDiscountAmount.toFixed(2)}`;
    
    // 3. Update total amount
    const totalPrice = parseFloat(document.getElementById('totalPrice').textContent.replace('â‚¹', ''));
    const totalDiscount = parseFloat(document.getElementById('totalDiscount').textContent.replace('-â‚¹', ''));
    const deliveryCharges = document.getElementById('deliveryCharges').textContent.includes('FREE') ? 0 : 100;
    const gst = parseFloat(document.getElementById('gst').textContent.replace('â‚¹', ''));
    
    const newTotalAmount = totalPrice - totalDiscount - couponDiscountAmount + deliveryCharges + gst;
    document.getElementById('totalAmount').textContent = `â‚¹${newTotalAmount.toFixed(2)}`;
    
    // 4. Update pay button amount
    document.getElementById('finalPayAmount').textContent = newTotalAmount.toFixed(2);
    
    // 5. Update savings message
    const totalSavings = totalDiscount + couponDiscountAmount;
    document.getElementById('totalSavings').textContent = totalSavings.toFixed(2);
}

    // Function to reset UI when coupon is removed
    function resetCouponUI() {
        // 1. Reset all coupon buttons to "Apply"
        document.querySelectorAll('.coupon').forEach(coupon => {
            coupon.classList.remove('applied');
            const buttonElement = coupon.querySelector('button');
            const couponId = coupon.getAttribute('data-id');
            
            buttonElement.className = 'btn btn-outlined';
            buttonElement.textContent = 'Apply';
            buttonElement.onclick = function() { 
                applyCoupon(couponId, '<%= user._id %>'); 
            };
        });
        
        // 2. Hide coupon discount row
        document.getElementById('couponDiscountRow').style.display = 'none';
        document.getElementById('appliedCouponCode').textContent = '';
        document.getElementById('couponDiscount').textContent = '-â‚¹0.00';
        
        // 3. Recalculate total amount without coupon discount
        const totalPrice = originalValues.totalPrice;
        const totalDiscount = originalValues.totalDiscount;
        const deliveryCharges = originalValues.deliveryCharges;
        const gst = originalValues.gst;
        
        const newTotalAmount = totalPrice - totalDiscount + deliveryCharges + gst;
        document.getElementById('totalAmount').textContent = `â‚¹${newTotalAmount.toFixed(2)}`;
        
        // 4. Update pay button amount
        document.getElementById('finalPayAmount').textContent = newTotalAmount.toFixed(2);
        
        // 5. Update savings message (without coupon discount)
        document.getElementById('totalSavings').textContent = totalDiscount.toFixed(2);
    }
</script>

