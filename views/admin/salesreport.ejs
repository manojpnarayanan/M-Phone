<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Sales Report - Evara Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="/assets/css/main.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        /* Global Container */
        .card-body {
            background-color: #f9fafb;
            padding: 2rem;
            border-radius: 16px;
            max-width: 100%;
            margin: 2rem auto;
            overflow-x: hidden;
            /* Remove the left margin that's causing the gap */
            margin-left: 0;
        }

        /* Ensure content doesn't overlap with sidebar */
        @media (min-width: 768px) {
            .card-body {
                /* Instead of a fixed margin, use width and max-width */
                width: calc(100% - 20px);
                max-width: 100%;
                margin-left: 10px;
                margin-right: 10px;
            }
        }

        /* Header Section */
        .d-flex.justify-content-between {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        h4 {
            font-size: 1.75rem;
            font-weight: 700;
            color: #111827;
            margin: 0;
            letter-spacing: -0.025em;
        }

        /* Export Buttons */
        .export-buttons {
            display: flex;
            gap: 0.75rem;
        }

        .export-buttons .btn {
            border-radius: 8px;
            padding: 0.75rem 1.25rem;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .export-buttons .btn i {
            font-size: 1.25rem;
        }

        .btn-primary {
            background-color: #4f46e5;
            border-color: #4f46e5;
        }

        .btn-primary:hover {
            background-color: #4338ca;
            border-color: #4338ca;
        }

        .btn-success {
            background-color: #10b981;
            border-color: #10b981;
        }

        .btn-success:hover {
            background-color: #059669;
            border-color: #059669;
        }

        /* Date Filter Section */
        .filter-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .filter-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            justify-content: space-between;
            align-items: center;
        }

        .date-range-select {
            min-width: 220px;
        }

        .date-inputs {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .input-group {
            min-width: 200px;
            position: relative;
        }

        .form-select,
        .form-control {
            border: 1px solid #e5e7eb;
            padding: 0.625rem 0.75rem;
            border-radius: 8px;
            font-size: 0.95rem;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

        .form-select:focus,
        .form-control:focus {
            border-color: #a5b4fc;
            outline: none;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        /* Summary Cards */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .summary-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .summary-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .card-content {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1.25rem;
        }

        .icon-container {
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .icon-container i {
            font-size: 1.75rem;
        }

        .card-details {
            flex: 1;
        }

        .card-details h6 {
            color: #6b7280;
            font-size: 0.875rem;
            margin: 0 0 0.5rem 0;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .amount {
            font-size: 1.75rem;
            font-weight: 700;
            color: #111827;
            letter-spacing: -0.025em;
        }

        /* Custom Colors */
        .bg-primary-light {
            background-color: #eff6ff;
        }

        .bg-success-light {
            background-color: #ecfdf5;
        }

        .bg-warning-light {
            background-color: #fffbeb;
        }

        .bg-info-light {
            background-color: #f0f9ff;
        }

        .text-primary {
            color: #4f46e5;
        }

        .text-success {
            color: #10b981;
        }

        .text-warning {
            color: #f59e0b;
        }

        .text-info {
            color: #0ea5e9;
        }

        /* Table Styles */
        .table-responsive {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
            margin-bottom: 2rem;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .table {
            width: 100%;
            min-width: 800px;
            border-collapse: separate;
            border-spacing: 0;
        }

        .table thead th {
            background-color: #f9fafb;
            color: #4b5563;
            font-weight: 600;
            padding: 1rem;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
            border-bottom: 2px solid #e5e7eb;
            position: sticky;
            top: 0;
        }

        .table tbody td {
            padding: 1.25rem 1rem;
            border-bottom: 1px solid #e5e7eb;
            color: #1f2937;
            vertical-align: middle;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

        .table tbody tr:hover {
            background-color: #f9fafb;
        }

        .table tbody td ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 0;
        }

        .table tbody td ul li {
            padding: 0.25rem 0;
        }

        /* Status Badges */
        .badge {
            padding: 0.5rem 0.75rem;
            border-radius: 9999px;
            font-weight: 500;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            display: inline-block;
        }

        .bg-success {
            background-color: #10b981;
            color: white;
        }

        .bg-warning {
            background-color: #f59e0b;
            color: white;
        }

        .bg-danger {
            background-color: #ef4444;
            color: white;
        }

        .bg-info {
            background-color: #0ea5e9;
            color: white;
        }

        /* Pagination */
        .pagination-area {
            margin-top: 2rem;
        }

        .pagination {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 0.5rem;
            list-style-type: none;
            padding-left: 0;
        }

        .pagination .page-item {
            margin: 0;
        }

        .pagination .page-link {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            color: #4b5563;
            transition: all 0.2s ease;
            font-weight: 500;
        }

        .pagination .page-link:hover {
            background-color: #f3f4f6;
            border-color: #d1d5db;
        }

        .pagination .page-item.active .page-link {
            background-color: #4f46e5;
            color: white;
            border-color: #4f46e5;
        }

        .pagination .page-item.disabled .page-link {
            color: #9ca3af;
            pointer-events: none;
            background-color: #f9fafb;
            border-color: #e5e7eb;
        }

        /* Empty State */
        .text-center {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .card-body {
                padding: 1.5rem;
            }

            .filter-container {
                flex-direction: column;
                align-items: stretch;
            }

            .export-buttons {
                width: 100%;
                justify-content: flex-start;
            }
        }

        @media (max-width: 768px) {
            .card-body {
                margin-left: 0;
                margin-top: 1rem;
            }

            .date-inputs {
                flex-direction: column;
                width: 100%;
            }

            .input-group {
                width: 100%;
            }

            .summary-cards {
                grid-template-columns: 1fr;
            }

            .table-responsive {
                padding: 1rem 0.5rem;
            }

            .table thead th,
            .table tbody td {
                padding: 0.75rem;
                font-size: 0.875rem;
            }

            .amount {
                font-size: 1.5rem;
            }
        }
    </style>

<body>
    <div class="screen-overlay"></div>
    <%- include('./partials/nav') %>
        <main class="main-wrap">
            <!-- <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i class="material-icons md-search"></i></button>
                    </div>
                    <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist>
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
            </div>
        </header> -->
            <section class="content-main">
                <div class="content-header">
                    <div>
                        <h2 class="content-title card-title">Sales Report</h2>
                        <p>Generate and download detailed sales reports</p>
                    </div>
                </div>
                <div class="card">
                    <div class="card-body">
                        <!-- Header section with export buttons -->
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4>Sales Report</h4>
                            <div class="export-buttons">
                                <button id="exportPdf" class="btn btn-primary">
                                    <i class="material-icons md-file_download"></i> Export PDF
                                </button>
                                <button id="exportExcel" class="btn btn-success">
                                    <i class="material-icons md-file_download"></i> Export Excel
                                </button>
                            </div>
                        </div>

                        <!-- Date Filter Section -->
                        <div class="filter-section mb-4">
                            <form id="filterForm" action="/admin/dashboard/sales-report" method="GET">
                                <div class="filter-container">
                                    <div class="date-range-select">
                                        <select class="form-select" name="dateRange" id="dateRangeSelect">
                                            <option value="">Select Date Range</option>
                                            <option value="today" <%=query.dateRange==='today' ? 'selected' : '' %>
                                                >Today</option>
                                            <option value="week" <%=query.dateRange==='week' ? 'selected' : '' %>>This
                                                Week</option>
                                            <option value="month" <%=query.dateRange==='month' ? 'selected' : '' %>>This
                                                Month</option>
                                            <option value="year" <%=query.dateRange==='year' ? 'selected' : '' %>>This
                                                Year</option>
                                            <option value="custom" <%=query.dateRange==='custom' ? 'selected' : '' %>
                                                >Custom Range</option>

                                        </select>
                                    </div>
                                    <div class="date-inputs">
                                        <div class="input-group">
                                            <input type="date" id="startDate" name="startDate" class="form-control"
                                                value="<%= query.startDate || '' %>" placeholder="Start Date">
                                        </div>
                                        <div class="input-group">
                                            <input type="date" id="endDate" name="endDate" class="form-control"
                                                value="<%= query.endDate || '' %>" placeholder="End Date">
                                        </div>
                                        <a href="#deliveredproducts">
                                            <button type="submit" id="filterButton"
                                                class="btn btn-primary">Filter</button>
                                        </a>
                                    </div>
                                </div>
                            </form>
                        </div>

                        <!-- Summary Cards -->
                        <div class="summary-cards">
                            <div class="summary-card">
                                <div class="card-content">
                                    <div class="icon-container bg-primary-light">
                                        <i class="material-icons md-monetization_on text-primary"></i>
                                    </div>
                                    <div class="card-details">
                                        <h6>Total Sales</h6>
                                        <span class="amount">₹<%= typeof totalSales !=='undefined' ?
                                                totalSales.toLocaleString() : '0' %></span>
                                    </div>
                                </div>
                            </div>
                            <div class="summary-card">
                                <div class="card-content">
                                    <div class="icon-container bg-success-light">
                                        <i class="material-icons md-shopping_cart text-success"></i>
                                    </div>
                                    <div class="card-details">
                                        <h6>Total Orders</h6>
                                        <span class="amount">
                                            <%= typeof totalOrders !=='undefined' ? totalOrders.toLocaleString() : '0'
                                                %>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="summary-card">
                                <div class="card-content">
                                    <div class="icon-container bg-warning-light">
                                        <i class="material-icons md-person text-warning"></i>
                                    </div>
                                    <div class="card-details">
                                        <h6>Total Customers</h6>
                                        <span class="amount">
                                            <%= typeof totalCustomers !=='undefined' ? totalCustomers.toLocaleString()
                                                : '0' %>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="summary-card">
                                <div class="card-content">
                                    <div class="icon-container bg-info-light">
                                        <i class="material-icons md-trending_up text-info"></i>
                                    </div>
                                    <div class="card-details">
                                        <h6>Average Order Value</h6>
                                        <span class="amount">₹<%= typeof avgOrderValue !=='undefined' ?
                                                avgOrderValue.toLocaleString() : '0' %></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Delivered Orders Table -->
                        <div class="table-responsive" id="deliveredproducts">
                            <h5 class="mb-3">Delivered Orders</h5>
                            <% if (typeof orders !=='undefined' && orders.length> 0) { %>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>ORDER ID</th>
                                            <th>CUSTOMER</th>
                                            <th>PRODUCTS</th>
                                            <th>TOTAL AMOUNT</th>
                                            <th>DATE</th>
                                            <th>STATUS</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% orders.forEach(order=> { %>
                                            <% const deliveredProducts=order.products.filter(product=> product.status
                                                === 'Delivered'); %>
                                                <% if (deliveredProducts.length> 0) { %>
                                                    <tr>
                                                        <td>#<%= order.orderID || order._id %>
                                                        </td>
                                                        <td>
                                                            <%= order.name || (order.user && order.user.name) || 'N/A'
                                                                %>
                                                        </td>
                                                        <td>
                                                            <ul>
                                                                <% deliveredProducts.slice(0, 2).forEach(item=> { %>
                                                                    <li>
                                                                        <%= item.product.name || item.productName
                                                                            || 'Product' %> x<%= item.quantity %>
                                                                    </li>
                                                                    <% }) %>
                                                                        <% if (deliveredProducts.length> 2) { %>
                                                                            <li>+ <%= deliveredProducts.length - 2 %>
                                                                                    more item(s)</li>
                                                                            <% } %>
                                                            </ul>
                                                        </td>
                                                        <td>₹<%= order.finalAmount ? order.finalAmount.toLocaleString()
                                                                : '0' %>
                                                        </td>
                                                        <td>
                                                            <%= new Date(order.orderDate ||
                                                                order.createdAt).toLocaleDateString() %>
                                                        </td>
                                                        <td><span class="badge bg-success">Delivered</span></td>
                                                    </tr>
                                                    <% } %>
                                                        <% }) %>
                                    </tbody>
                                </table>
                                <% } else { %>
                                    <div class="text-center">
                                        <p>No delivered orders found for the selected period.</p>
                                    </div>
                                    <% } %>
                        </div>
                    </div>
                </div>
            </section>
        </main>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>
            document.getElementById('exportPdf').addEventListener('click', async () => {
                const period = document.getElementById('dateRangeSelect').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                if (!period) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Information',
                        text: 'Please select a date range.',
                    });
                    return;
                }

                if (period === 'custom' && (!startDate || !endDate)) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Date Range',
                        text: 'For custom range, both start date and end date are required.',
                    });
                    return;
                }
                if (period !== 'custom' && !startDate) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Information',
                        text: 'Please select a date.',
                    });
                    return;
                }


                if (!period || !startDate) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Information',
                        text: 'Please select a date range or specific date.',
                    });
                    return;
                }

                try {

                    // Build query parameters based on period type
                    const queryParams = new URLSearchParams({
                        period: period,
                        format: 'pdf'
                    });
                    if (period === 'custom') {
                        queryParams.append('startDate', startDate);
                        queryParams.append('endDate', endDate);
                    } else {
                        queryParams.append('date', startDate);
                    }
                    // Use startDate as the 'date' parameter your backend expects


                    // const checkUrl = `/admin/dashboard/sales-report/download-invoice?period=${period}&date=${startDate}&endDate=${endDate}&format=pdf`;
                    const checkUrl = `/admin/dashboard/sales-report/download-invoice?${queryParams.toString()}`;

                    const response = await fetch(checkUrl);

                    if (!response.ok) {
                        const data = await response.json();
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to generate report',
                        });
                    } else {
                        window.location.href = checkUrl;
                    }
                } catch (error) {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred.',
                    });
                }
            });

            document.getElementById('exportExcel').addEventListener('click', async () => {
                const period = document.getElementById('dateRangeSelect').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

                if (!period) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Information',
                        text: 'Please select a date range.',
                    });
                    return;
                }

                if (period === 'custom' && (!startDate || !endDate)) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Date Range',
                        text: 'For custom range, both start date and end date are required.',
                    });
                    return;
                }


                if (!period || !startDate) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Missing Information',
                        text: 'Please select a date range or specific date.',
                    });
                    return;
                }

                try {

                    // Build query parameters based on period type
                    const queryParams = new URLSearchParams({
                        period: period,
                        format: 'excel'
                    });

                    if (period === 'custom') {
                        queryParams.append('startDate', startDate);
                        queryParams.append('endDate', endDate);
                    } else {
                        queryParams.append('date', startDate);
                    }
                    // Same approach for Excel export
                    // const checkUrl = `/admin/dashboard/sales-report/download-invoice?period=${period}&date=${startDate}&endDate=${endDate}&format=excel`;
                    const checkUrl = `/admin/dashboard/sales-report/download-invoice?${queryParams.toString()}`;
                    const response = await fetch(checkUrl);

                    if (!response.ok) {
                        const data = await response.json();
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to generate report',
                        });
                    } else {
                        window.location.href = checkUrl;
                    }
                } catch (error) {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred.',
                    });
                }
            });



            document.addEventListener('DOMContentLoaded', function () {
                // Get references to form elements
                const dateRangeSelect = document.getElementById('dateRangeSelect');
                const startDateInput = document.getElementById('startDate');
                const endDateInput = document.getElementById('endDate');
                const filterForm = document.getElementById('filterForm');


                function updateDateInputs(range) {
                    const today = new Date();
                    let start = new Date();
                    let end = new Date();

                    switch (range) {
                        case 'today':
                            // Set both start and end to today
                            break;
                        case 'week':
                            // Set start to beginning of current week (Sunday)
                            start = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 6);
                            // Set end to today
                            end = new Date(today);
                            break;
                        case 'month':
                            // Set start to first day of current month
                            start.setDate(1);
                            break;
                        case 'year':
                            // Set start to first day of current year
                            start = new Date(today.getFullYear(), 0, 1);
                            break;
                        case 'custom':
                            return;

                        default:
                            startDateInput.value = '';
                            endDateInput.value = '';
                            return;
                    }

                    // Format dates as YYYY-MM-DD for the input fields
                    // startDateInput.value = start.toISOString().split('T')[0];
                    // endDateInput.value = end.toISOString().split('T')[0];
                    startDateInput.value = formatDate(start);
                    endDateInput.value = formatDate(end);
                }
                function formatDate(date) {
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`;
                }


                // Update date inputs when date range selection changes
                dateRangeSelect.addEventListener('change', function () {
                    updateDateInputs(this.value);
                });

                // When custom dates are entered, switch date range to empty (custom)
                // startDateInput.addEventListener('change', function() {
                //     if (dateRangeSelect.value !== '') {
                //         dateRangeSelect.value = '';
                //     }
                // });

                // endDateInput.addEventListener('change', function() {
                //     if (dateRangeSelect.value !== '') {
                //         dateRangeSelect.value = '';
                //     }
                // });

                startDateInput.addEventListener('change', function () {
                    if (dateRangeSelect.value !== 'custom' && startDateInput.value) {
                        dateRangeSelect.value = 'custom';
                    }
                });

                endDateInput.addEventListener('change', function () {
                    if (dateRangeSelect.value !== 'custom' && endDateInput.value) {
                        dateRangeSelect.value = 'custom';
                    }
                });

                // Initialize dates based on current selection (if any)
                if (dateRangeSelect.value) {
                    updateDateInputs(dateRangeSelect.value);
                }

                // Handle form submission
                filterForm.addEventListener('submit', function (e) {
                    e.preventDefault();

                    // Validate date inputs
                    if (!startDateInput.value) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Missing Date',
                            text: 'Please select a start date for the report.'
                        });
                        return false;
                    }

                    // If only start date is provided but not end date, set end date to today
                    if (startDateInput.value && !endDateInput.value) {
                        // endDateInput.value = new Date().toISOString().split('T')[0];
                        endDateInput.value = formatDate(new Date());

                    }

                    // Validate date range
                    if (startDateInput.value && endDateInput.value) {
                        const start = new Date(startDateInput.value);
                        const end = new Date(endDateInput.value);

                        if (start > end) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Invalid Date Range',
                                text: 'Start date cannot be after end date.'
                            });
                            return false;
                        }
                    }

                    this.submit();
                });


                document.getElementById('filterButton').addEventListener('click', function () {
                    setTimeout(() => {
                        const element = document.getElementById('deliveredproducts');
                        if (element) {
                            element.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        }
                    }, 100);
                });
            });



        </script>
</body>

</html>