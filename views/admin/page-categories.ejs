<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Evara Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="/assets/css/main.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body>
    <div class="screen-overlay"></div>
    <%- include('./partials/nav') %>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <!-- <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i class="material-icons md-search"></i></button>
                    </div>
                    <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist>
                </form> -->
            <!-- </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i> </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage" aria-expanded="false"><i class="material-icons md-public"></i></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="/assets/imgs/theme/flag-us.png" alt="English">English</a>
                            <a class="dropdown-item" href="#"><img src="/assets/imgs/theme/flag-fr.png" alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="/assets/imgs/theme/flag-jp.png" alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="/assets/imgs/theme/flag-cn.png" alt="Français">中国人</a>
                        </div>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount" aria-expanded="false"> <img class="img-xs rounded-circle" src="/assets/imgs/people/avatar2.jpg" alt="User"></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit Profile</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-settings"></i>Account Settings</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-account_balance_wallet"></i>Wallet</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-receipt"></i>Billing</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-help_outline"></i>Help center</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="#"><i class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div> -->
        </header>
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Categories </h2>
                    <p>Add, edit or block a category</p>
                </div>
                <div>
                    <input id="categorySearch" type="text" placeholder="Search Categories" class="form-control bg-white">
                </div>
            </div>
            <% if (messages.success) { %>
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= messages.success %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>
            
            <% if (messages.error) { %>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= messages.error %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <form action="/admin/dashboard/products/createcategory" method="post">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Name</label>
                                    <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" />
                                </div>
                                <div class="mb-4">
                                    <label for="product_slug" class="form-label">Slug</label>
                                    <input type="text" name="slug" placeholder="Type here" class="form-control" id="product_slug" />
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Parent</label>
                                    <select name="parent" class="form-select">
                                        <option value="Premium">Premium</option>
                                        <option value="Business">Business</option>
                                        <option value="Featured">Featured</option>
                                    </select>
                                   

                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Description</label>
                                    <textarea name="description" placeholder="Type here" class="form-control"></textarea>
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-primary">Create category</button>
                                </div>
                            </form>
                        </div>
                        <div class="col-md-9">
                            <div class="table-responsive">
                                                <!-- Table Section -->
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Slug</th>
                    <th>Parent</th>
                    <th>Actions</th>
                    <th>Status</th>
                    <th>Offer</th>
                    <th>Block/Unblock</th>
                    <th>Add Offer</th>

                </tr>
            </thead>
            <tbody>
                <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                    <% categories.forEach(category => { %>
                        <tr>
                            <td><%= category.name %></td>
                            <td><%= category.slug %></td>
                            <td><%= category.parent ? category.parent : 'None' %></td>
        
                            <td> <!-- Actions Column -->
                                <a href="/admin/dashboard/products/editcategory/<%= category._id %>" class="btn btn-primary btn-sm">Edit</a>
                            </td>
        
                            <td> <!-- Status Column -->
                                <span class="badge <%= category.isActive ? 'bg-success' : 'bg-danger' %>">
                                    <%= category.isActive ? 'Active' : 'Archived' %>
                                </span>
                            </td>


                            <!-- Offer Status Column -->
                            <td> 
                                <span class="badge <%= category.discount ? 'bg-success' : 'bg-danger' %>" 
                                    data-id="<%= category._id%> " >
                                    <%= category.discount ? category.discount : 0 %>%
                                </span>
                            </td>
                            
                            <td> <!-- Block/Unblock Column -->
                                <button class="btn <%= category.isActive ? 'btn-danger' : 'btn-success' %> toggle-category"
                                    data-id="<%= category._id %>">
                                    <%= category.isActive ? 'Block' : 'Unblock' %>
                                </button>
                                
                            </td>
                            <!-- ADD/REMOVE OFFER Column -->
                            <td> 
                             <button class="btn <%= category.discount ? 'btn-danger': 'btn-success'  %> toggle-offer-btn"
                                    data-id="<%= category._id %>">
                                    <%= category.discount ?   'Remove':'Add' %>
                                </button>
                            </td>  
                            
                            
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="6">No categories found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
        
    </div>
      <!-- Pagination Controls -->
    <div class="pagination-container mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <!-- <li class="page-item"><a class="page-link" href=""" data-page="prev">Previous</a></li> -->
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <!-- <li class="page-item"><a class="page-link" href="#" data-page="next">Next</a></li> -->
            </ul>
        </nav>
    </div>
                               
                              
                                                        
                            </div>
                        </div> <!-- .col// -->
                    </div> <!-- .row // -->
                </div> <!-- card body .// -->
            </div> <!-- card .// -->
        </section> <!-- content-main end// -->
        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                    document.write(new Date().getFullYear())
                    </script> ©, Evara - HTML Ecommerce Template .
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>
    <script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/assets/js/vendors/select2.min.js"></script>
    <script src="/assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="/assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="/assets/js/main.js" type="text/javascript"></script>

    <script>

document.querySelectorAll(".toggle-offer-btn").forEach(button => {
    button.addEventListener("click", function() {
        const categoryId = this.getAttribute("data-id");
        const isRemoveAction = this.textContent.trim() === 'Remove';
        console.log(categoryId);
        
        if (isRemoveAction) {
            // Handle Remove Offer action
            Swal.fire({
                title: `Are you sure you want to remove the offer from this category?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, remove it!"
            })
            .then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/dashboard/categories/remove-offer/${categoryId}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok');
                    })
                    .then(data => {
                        // Update the offer badge to show 0%
                        const offerBadge = this.closest('tr').querySelector('.badge[data-id]');
                        if (offerBadge) {
                            offerBadge.textContent = '0%';
                            offerBadge.classList.remove('bg-success');
                            offerBadge.classList.add('bg-danger');
                        }
                        
                        // Update the button to "Add"
                        this.textContent = 'Add';
                        this.classList.remove('btn-danger');
                        this.classList.add('btn-success');
                        
                        Swal.fire(
                            'Success!',
                            'Offer has been removed successfully.',
                            'success'
                        );
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'Failed to remove offer.',
                            'error'
                        );
                    });
                }
            });
        } else {
            // Handle Add Offer action (existing code)
            Swal.fire({
                title: `Are you sure you want to add Offer to this category?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, proceed!"
            })
            .then((result) => {
                if (result.isConfirmed) {
                    // Show a second Swal modal to get the percentage input
                    Swal.fire({
                        title: 'Enter Offer Percentage',
                        input: 'number',
                        inputLabel: 'Percentage',
                        inputPlaceholder: 'Enter percentage (e.g., 10)',
                        showCancelButton: true,
                        inputValidator: (value) => {
                            if (!value) {
                                return 'Please enter a percentage!';
                            }
                            if (value < 0 || value > 100) {
                                return 'Percentage must be between 0 and 100';
                            }
                        }
                    })
                    .then((offerValue) => {
                        if (offerValue.isConfirmed) {
                            const offerPercentage = offerValue.value;
                            fetch(`/admin/dashboard/categories/add-offer/${categoryId}`, {
                                method: "PUT",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ offerPercentage })
                            })
                            .then(response => {
                                if (response.ok) {
                                    return response.json();
                                }
                                throw new Error('Network response was not ok');
                            })
                            .then(data => {
                                // Update the offer badge to show the new percentage
                                const offerBadge = this.closest('tr').querySelector('.badge[data-id]');
                                if (offerBadge) {
                                    offerBadge.textContent = `${offerPercentage}%`;
                                    offerBadge.classList.remove('bg-danger');
                                    offerBadge.classList.add('bg-success');
                                }
                                
                                // Update the button to "Remove"
                                this.textContent = 'Remove';
                                this.classList.remove('btn-success');
                                this.classList.add('btn-danger');
                                
                                Swal.fire(
                                    'Success!',
                                    'Offer has been added successfully.',
                                    'success'
                                );
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Error!',
                                    'Failed to add offer.',
                                    'error'
                                );
                            });
                        }
                    });
                }
            });
        }
    });
});





document.addEventListener("DOMContentLoaded", function () {
    // Toggle category status with confirmation and SweetAlert
    document.querySelectorAll(".toggle-category").forEach(button => {
        button.addEventListener("click", function () {
            const categoryId = this.getAttribute("data-id");
            const action = this.textContent;

            Swal.fire({
                title: `Are you sure you want to ${action} this category?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, proceed!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/dashboard/categories/${categoryId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update button text and class based on isActive status
                            this.textContent = data.isActive ? "Block" : "Unblock";
                            this.classList.toggle("btn-success", !data.isActive);
                            this.classList.toggle("btn-danger", data.isActive);

                            // Update the status badge
                            const statusBadge = this.closest('tr').querySelector('.badge');
                            if (statusBadge) {
                                statusBadge.textContent = data.isActive ? "Active" : "Archived";
                                statusBadge.classList.toggle('bg-success', data.isActive);
                                statusBadge.classList.toggle('bg-danger', !data.isActive);
                            }

                            Swal.fire({
                                icon: "success",
                                title: `Category ${data.isActive ? "unblocked" : "blocked"} successfully!`,
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Failed to update category status",
                            });
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        Swal.fire({
                            icon: "error",
                            title: "An error occurred!",
                        });
                    });
                }
            });
        });
    });

    // Search categories with SweetAlert if error occurs
    const searchInput = document.getElementById("categorySearch");
    searchInput.addEventListener("keyup", function () {
        const searchTerm = searchInput.value.trim();

        fetch(`/admin/dashboard/products/categories?search=${searchTerm}`)
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, "text/html");
                const newTableBody = doc.querySelector("tbody");
                if (newTableBody) {
                    document.querySelector("tbody").innerHTML = newTableBody.innerHTML;
                    
                    // Reattach event listeners to the new buttons
                    attachEventListeners();
                }
            })
            .catch(error => {
                console.error(error);
                Swal.fire({
                    icon: "error",
                    title: "Failed to load search results",
                });
            });
    });
    
    // Function to attach event listeners to buttons
    function attachEventListeners() {
        // Reattach toggle-category event listeners
        document.querySelectorAll(".toggle-category").forEach(button => {
            button.addEventListener("click", function () {
                // Same event handler code as above
                const categoryId = this.getAttribute("data-id");
                const action = this.textContent;
                
                // Rest of the toggle category code...
                // (This is a duplicate of the code above, but needed for reattaching events)
            });
        });
        
        // Reattach toggle-offer-btn event listeners
        document.querySelectorAll(".toggle-offer-btn").forEach(button => {
            button.addEventListener("click", function() {
                // Same event handler code as above
                const categoryId = this.getAttribute("data-id");
                const isRemoveAction = this.textContent.trim() === 'Remove';
                
              
            });
        });
    }
});




document.addEventListener("DOMContentLoaded", function () {
            const paginationLinks = document.querySelectorAll(".pagination a");

            paginationLinks.forEach(link => {
                link.addEventListener("click", function (e) {
                    e.preventDefault();
                    const page = this.getAttribute("data-page");
                    const searchTerm = document.getElementById("categorySearch").value.trim();

                    fetch(`/admin/dashboard/products/categories?page=${page}&search=${searchTerm}`)
                        .then(response => response.text())
                        .then(html => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(html, "text/html");
                            document.querySelector("tbody").innerHTML = doc.querySelector("tbody").innerHTML;
                            
                            
                            document.querySelectorAll(".toggle-category").forEach(button => {
                        
                            });
                            
                            document.querySelectorAll(".toggle-offer-btn").forEach(button => {
                    
                            });
                            attachEventListeners();
                        })

                        .catch(error => console.error(error));
                });
            });
        });
</script>





</body>

</html>