<!DOCTYPE HTML>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Evara Dashboard - Admin Wallet</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" type="image/x-icon" href="assets/imgs/theme/favicon.svg">
    <link href="/assets/css/main.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="screen-overlay"></div>
    <%- include('./partials/nav') %>
    <main class="main-wrap">
        <header class="main-header navbar">
            <!-- Header content from categories page -->
        </header>
        
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Admin Wallet</h2>
                    <p>View wallet transactions and balance</p>
                </div>
                <div>
                    <input id="transactionSearch" type="text" placeholder="Search Transactions" class="form-control bg-white">
                </div>
            </div>

            <% if (messages.success) { %>
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= messages.success %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>
            
            <% if (messages.error) { %>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= messages.error %>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            <% } %>

            <!-- Admin Wallet Summary Card at the top -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="wallet-summary">
                        <h4>Wallet Summary</h4>
                        <div class="balance-card">
                            <p>Total Balance</p>
                            <h2>₹<%=(transactionSummary.totalCredits - transactionSummary.totalDebits).toFixed(2) %></h2>
                            <div class="d-flex justify-content-between mt-3">
                                <div>
                                    <small>Total Credits</small>
                                    <p class="text-success">₹<%=transactionSummary.totalCredits.toFixed(2) %></p>
                                </div>
                                <div>
                                    <small>Total Debits</small>
                                    <p class="text-danger">₹<%= transactionSummary.totalDebits.toFixed(2) %></p>
                                </div>
                            </div>
                            <!-- <button class="btn btn-primary w-100 mt-3" id="addFundsBtn">Add Funds</button> -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Wallet Summary Details as Cards in Rows -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Total Credits</h5>
                            <h3 class="text-success">₹<%=transactionSummary.totalCredits.toFixed(2) %></h3>
                            <p class="card-text">All incoming transactions</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Total Debits</h5>
                            <h3 class="text-danger">₹<%= transactionSummary.totalDebits.toFixed(2) %></h3>
                            <p class="card-text">All outgoing transactions</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Net Balance</h5>
                            <h3>₹<%=(transactionSummary.totalCredits - transactionSummary.totalDebits).toFixed(2) %></h3>
                            <p class="card-text">Current wallet balance</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Full-width Transaction Table -->
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Transaction ID</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>

                                </tr>
                            </thead>
                            <tbody>
                                <% if (wallet.transactions && wallet.transactions.length > 0) { %>
                                    <% wallet.transactions.forEach(transaction => { %>
                                        <tr>
                                            
                                            <td><%= transaction.orderId.user.name %></td>
                                            <td><%= transaction.transactionId %></td>
                                            <td><%= transaction.transactionDescription %></td>
                                            <td>₹<%= transaction.transactionAmount.toFixed(2) %></td>
                                            <td>
                                                <span class="badge <%= 
                                                transaction.transactionType && transaction.transactionType.toLowerCase() === 'credit' ? 'bg-success' : 
                                                transaction.transactionType && transaction.transactionType.toLowerCase() === 'debit' ? 'bg-danger' : 
                                                'bg-secondary' 
                                                %>">
                                                    <%= transaction.transactionType %>
                                                </span>
                                            </td>
                                            <td><%= transaction.transactionDate.toLocaleDateString() %></td>
                                            <td>
                                                <span class="badge <%= 
                                                    transaction.transactionStatus === 'Completed' ?'bg-success text-white' : 
                                                    transaction.transactionStatus === 'Pending' ? 'bg-warning' : 
                                                    'bg-danger' 
                                                %>">
                                                    <%= transaction.transactionStatus %>
                                                </span>
                                            </td>
                                            <td>
                                                <% if (transaction.transactionType && transaction.transactionType.toLowerCase() === 'debit') { %>
                                                    <button class="btn btn-sm btn-primary view-order" data-order-id="<%= transaction.orderId._id %>">
                                                        ViewOrder
                                                    </button>
                                                <% } else { %>
                                            
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="6" class="text-center">No transactions found</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                    
                   
                </div>
            </div>

            <div class="pagination-container mt-4">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <!-- <li class="page-item"><a class="page-link" href=""" data-page="prev">Previous</a></li> -->
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                            </li>
                        <% } %>
                        <!-- <li class="page-item"><a class="page-link" href="#" data-page="next">Next</a></li> -->
                    </ul>
                </nav>
            </div>


        </section>

        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>document.write(new Date().getFullYear())</script> ©, Evara - HTML Ecommerce Template.
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">All rights reserved</div>
                </div>
            </div>
        </footer>
    </main>

    <script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/assets/js/main.js" type="text/javascript"></script>

   

    <script>
        document.addEventListener("DOMContentLoaded", function() {
    // Check for URL parameters to show alerts
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('success')) {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: urlParams.get('success'),
            timer: 3000
        });
    }
    if (urlParams.has('error')) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: urlParams.get('error')
        });
    }
    
    // Search functionality
    const searchInput = document.getElementById("transactionSearch");
    
    if (searchInput) {
        searchInput.addEventListener("keyup", function() {
            const searchTerm = searchInput.value.trim();
            loadTransactions(1, searchTerm);
        });
    }
    
    // Initial attachment of pagination event listeners
    attachPaginationEventListeners();
    
    // Initial attachment of view order event listeners
    attachViewOrderEventListeners();
});

// Function to load transactions with pagination and search
function loadTransactions(page, searchTerm) {
    // Show loading indicator
    const tableBody = document.querySelector("tbody");
    tableBody.innerHTML = '<tr><td colspan="8" class="text-center">Loading...</td></tr>';
    
    // Build URL with parameters
    const url = new URL(window.location.href);
    url.searchParams.set('page', page);
    if (searchTerm) {
        url.searchParams.set('search', searchTerm);
    } else {
        url.searchParams.delete('search');
    }
    
    // Set this for AJAX detection
    const headers = {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json'
    };
    
    // Fetch data
    fetch(url.toString(), { headers })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server responded with ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Update the data in the table
            updateTransactionTable(data.wallet);
            
            // Update summary cards
            updateSummaryCards(data.transactionSummary);
            
            // Update pagination
            updatePagination(data.currentPage, data.totalPages);
            
            // Re-attach event listeners
            attachViewOrderEventListeners();
            attachPaginationEventListeners();
            
            // Show success/error messages if any
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.success,
                    timer: 3000
                });
            }
            if (data.error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.error
                });
            }
            
            // Update URL without refreshing page
            history.pushState(null, '', url.toString());
        })
        .catch(error => {
            console.error("Error loading transactions:", error);
            tableBody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Failed to load data. Please try again.</td></tr>';
            
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load transaction data'
            });
        });
}

// Update the transaction table with new data
function updateTransactionTable(wallet) {
    const tableBody = document.querySelector("tbody");
    
    if (!wallet.transactions || wallet.transactions.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="8" class="text-center">No transactions found</td></tr>';
        return;
    }
    
    let html = '';
    wallet.transactions.forEach(transaction => {
        html += `
            <tr>
                <td>${transaction.orderId.user ? transaction.orderId.user.name : 'N/A'}</td>
                <td>${transaction.transactionId}</td>
                <td>${transaction.transactionDescription}</td>
                <td>₹${transaction.transactionAmount.toFixed(2)}</td>
                <td>
                    <span class="badge ${
                        transaction.transactionType && transaction.transactionType.toLowerCase() === 'credit' ? 'bg-success' : 
                        transaction.transactionType && transaction.transactionType.toLowerCase() === 'debit' ? 'bg-danger' : 
                        'bg-secondary'
                    }">
                        ${transaction.transactionType}
                    </span>
                </td>
                <td>${new Date(transaction.transactionDate).toLocaleDateString()}</td>
                <td>
                    <span class="badge ${
                        transaction.transactionStatus === 'Completed' ? 'bg-success text-white' : 
                        transaction.transactionStatus === 'Pending' ? 'bg-warning' : 
                        'bg-danger'
                    }">
                        ${transaction.transactionStatus}
                    </span>
                </td>
                <td>
                    ${transaction.transactionType && transaction.transactionType.toLowerCase() === 'debit' ? 
                        `<button class="btn btn-sm btn-primary view-order" data-order-id="${transaction.orderId._id}">
                            ViewOrder
                        </button>` : 
                        ''}
                </td>
            </tr>
        `;
    });
    
    tableBody.innerHTML = html;
}

// Update the summary cards with new data
function updateSummaryCards(summary) {
    // Update main balance card
    document.querySelector('.balance-card h2').textContent = `₹${(summary.totalCredits - summary.totalDebits).toFixed(2)}`;
    document.querySelector('.balance-card .text-success').textContent = `₹${summary.totalCredits.toFixed(2)}`;
    document.querySelector('.balance-card .text-danger').textContent = `₹${summary.totalDebits.toFixed(2)}`;
    
    // Update summary cards in the row
    const cards = document.querySelectorAll('.row.mb-4 .card');
    if (cards.length >= 3) {
        // Credits card
        cards[0].querySelector('h3').textContent = `₹${summary.totalCredits.toFixed(2)}`;
        
        // Debits card
        cards[1].querySelector('h3').textContent = `₹${summary.totalDebits.toFixed(2)}`;
        
        // Net balance card
        cards[2].querySelector('h3').textContent = `₹${(summary.totalCredits - summary.totalDebits).toFixed(2)}`;
    }
}

// Update pagination controls
function updatePagination(currentPage, totalPages) {
    const paginationContainer = document.querySelector('.pagination');
    if (!paginationContainer) return;
    
    let paginationHtml = '';
    
    // Add Previous button if not on first page
    if (currentPage > 1) {
        paginationHtml += `<li class="page-item">
            <a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>
        </li>`;
    }
    
    // Add page numbers
    for (let i = 1; i <= totalPages; i++) {
        paginationHtml += `<li class="page-item ${currentPage === i ? 'active' : ''}">
            <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>`;
    }
    
    // Add Next button if not on last page
    if (currentPage < totalPages) {
        paginationHtml += `<li class="page-item">
            <a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>
        </li>`;
    }
    
    paginationContainer.innerHTML = paginationHtml;
}

// Pagination event listeners
function attachPaginationEventListeners() {
    document.querySelectorAll(".pagination a").forEach(link => {
        link.addEventListener("click", function(e) {
            e.preventDefault();
            const page = this.getAttribute("data-page");
            const searchTerm = document.getElementById("transactionSearch")?.value.trim() || '';
            
            loadTransactions(page, searchTerm);
        });
    });
}

// View order button event listeners
function attachViewOrderEventListeners() {
    document.querySelectorAll('.view-order').forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            
            if (!orderId) {
                console.error('No order ID found');
                Swal.fire('Error', 'Order ID is missing', 'error');
                return;
            }
            
            window.location.href = `/admin/dashboard/wallet/view-detail/${orderId}`;
        });
    });
}
    </script>


</body>
</html>